Gustavo henrique pinto

OBS: Códigos diísponiveis em: https://github.com/gustapinto/fatec/tree/main/Aulas/Algoritimos%20e%20L%C3%B3gica%20de%20Programa%C3%A7%C3%A3o/C%2B%2B/lista_exercicios

Respostas

---

1.

#include <iostream>

using namespace std;

int main() {
    int qtde_cavalos;
    int qtde_ferraduras;

    cout << "Informe quantos cavalos foram comprados: ";
    cin >> qtde_cavalos;

    qtde_ferraduras = qtde_cavalos * 4;

    cout << endl;
    cout << "Serão necessárias " << qtde_ferraduras << " ferraduras \n";

    return 0;
}

---

2.

#include <iostream>

using namespace std;

int main() {
    float aposta_1;
    float aposta_2;
    float aposta_total;
    float premio_total;
    float premio_ponderado;
    float premio_recebido_1;
    float premio_recebido_2;

    cout << "Informe o valor da primeira aposta: ";
    cin >> aposta_1;

    cout << "Informe o valor da segunda aposta: ";
    cin >> aposta_2;

    aposta_total = aposta_1 + aposta_2;

    cout << "Informe o valor total do prêmio: ";
    cin >> premio_total;

    premio_ponderado = premio_total / aposta_total;

    premio_recebido_1 = premio_ponderado * aposta_1;
    premio_recebido_2 = premio_ponderado * aposta_2;

    cout << endl;
    cout << "O jogador 1 receberá R$ " << premio_recebido_1 << endl;
    cout << "O jogador 2 receberá R$ " << premio_recebido_2 << endl;

    return 0;
}

---

3.

#include <iostream>

using namespace std;

int main() {
    const int VALOR_CAMISA_PEQUENA = 12;
    const int VALOR_CAMISA_MEDIA = 15;
    const int VALOR_CAMISA_GRANDE = 18;

    int qtde_camisas_pequenas;
    int qtde_camisas_medias;
    int qtde_camisas_grandes;
    int valor_total_camisas_pequenas;
    int valor_total_camisas_medias;
    int valor_total_camisas_grandes;
    int valor_total_da_venda;

    cout << "Informe quantas camisas pequenas foram vendidas: ";
    cin >> qtde_camisas_pequenas;

    cout << "Informe quantas camisas médias foram vendidas: ";
    cin >> qtde_camisas_medias;

    cout << "Informe quantas camisas grandes foram vendidas: ";
    cin >> qtde_camisas_grandes;

    valor_total_camisas_pequenas = VALOR_CAMISA_PEQUENA * qtde_camisas_pequenas;
    valor_total_camisas_medias = VALOR_CAMISA_MEDIA * qtde_camisas_medias;
    valor_total_camisas_grandes = VALOR_CAMISA_GRANDE * qtde_camisas_grandes;

    valor_total_da_venda = valor_total_camisas_pequenas
        + valor_total_camisas_medias
        + valor_total_camisas_grandes;

    cout << endl;
    cout << "Valor total da venda: R$ " << valor_total_da_venda << endl;

    return 0;
}

---

4.

#include <iostream>

using namespace std;

int main() {
    string const VETOR_PALESTRAS[4] = {
        "| Linux                    | Auditório 1         | 8h as 9h   |",
        "| Recuperação de desastres | Auditório 2         | 9h as 10h  |",
        "| Windows Server           | Auditório 3         | 13h as 14h |",
        "| Lógica e Programação     | Auditório Principal | 15h as 17h |",
    };

    int codigo_palestra;
    int indice_palestra;

    cout << "Informe o código da palestra: ";
    cin >> codigo_palestra;


    if (codigo_palestra > 4 || codigo_palestra <= 0) {
        cout << endl;
        cout << "O código informado não existe, por favor tente novamente\n";

        return 0;
    }

    indice_palestra = codigo_palestra - 1;

    cout << endl;
    cout << "|-------------------------------------------------------------|\n";
    cout << "| Palestra                 | Local               | Horário    |\n";
    cout << "|-------------------------------------------------------------|\n";
    cout << VETOR_PALESTRAS[indice_palestra] << endl;
    cout << "|-------------------------------------------------------------|\n";

    return 0;
}

---

5.

#include <iostream>

using namespace std;

int main() {
    int const MG_POR_ML = 500;
    int const GOTAS_POR_ML = 20;

    int idade_paciente;
    float peso_paciente;
    float mg_a_serem_tomados;
    float ml_a_serem_tomados;
    float gotas_a_serem_tomadas;

    cout << "Informe a idade do paciente: ";
    cin >> idade_paciente;

    cout << "Informe o peso do paciente: ";
    cin >> peso_paciente;

    // C++ não permite o use de switch com float :/
    if (idade_paciente >= 12) {
        if (peso_paciente >= 60) mg_a_serem_tomados = 1000;
        if (peso_paciente < 60) mg_a_serem_tomados = 875;
    } else {
        if (peso_paciente < 5) mg_a_serem_tomados = 0;
        if (peso_paciente >= 5 && peso_paciente <= 9) mg_a_serem_tomados = 125;
        if (peso_paciente > 9 && peso_paciente <= 16) mg_a_serem_tomados = 250;
        if (peso_paciente > 16 && peso_paciente <= 24) mg_a_serem_tomados = 375;
        if (peso_paciente > 24 && peso_paciente <= 30) mg_a_serem_tomados = 500;
        if (peso_paciente > 30) mg_a_serem_tomados = 750;
    }

    ml_a_serem_tomados = mg_a_serem_tomados / MG_POR_ML;
    gotas_a_serem_tomadas = ml_a_serem_tomados * GOTAS_POR_ML;

    cout << endl;
    cout << "O paciente deve tomar " << gotas_a_serem_tomadas << " gotas\n";

    return 0;
}

---

6.



---

7.

#include <iostream>

using namespace std;

int main() {
    double graos_no_quadrado = 1;
    double total_de_graos = 1;

    for (int i = 2; i <= 64; i++) {
        graos_no_quadrado *= 2;

        cout << graos_no_quadrado << endl;

        total_de_graos += graos_no_quadrado;
    }

    cout << ""<< total_de_graos << endl;

    return 0;
}

---

8.

#include <iostream>

using namespace std;

int main() {
    int qtde_elementos_por_vetor;

    cout << "Informe a quantidade de elementos dos vetores: ";
    cin >> qtde_elementos_por_vetor;

    int vetor_a[qtde_elementos_por_vetor];
    int vetor_b[qtde_elementos_por_vetor];
    int vetor_c[qtde_elementos_por_vetor];
    int vetor_d[qtde_elementos_por_vetor];
    int soma_vetor_a = 0;
    int soma_vetor_b = 0;
    int produto_escalar = 0;

    for (int i = 0; i < qtde_elementos_por_vetor; i++) {
        cout << "Informe o elemento " << i << " do vetor A: ";
        cin >> vetor_a[i];
    }

    for (int i = 0; i < qtde_elementos_por_vetor; i++) {
        cout << "Informe o elemento " << i << " do vetor B: ";
        cin >> vetor_b[i];
    }

    for (int i = 0; i < qtde_elementos_por_vetor; i++) {
        soma_vetor_a += vetor_a[i];
        soma_vetor_b += vetor_b[i];

        vetor_c[i] = vetor_a[i] + vetor_b[i];
        vetor_d[i] = vetor_a[i] - vetor_b[i];

        produto_escalar += vetor_a[i] * vetor_b[i];
    }

    cout << endl;

    cout << "Vetor A: \n";
    for (int i = 0; i < qtde_elementos_por_vetor; i++) {
        cout << "| " << vetor_a[i];
    }

    cout << "\nVetor B: \n";
    for (int i = 0; i < qtde_elementos_por_vetor; i++) {
        cout << "| " << vetor_b[i];
    }

    cout << "\nVetor C: \n";
    for (int i = 0; i < qtde_elementos_por_vetor; i++) {
        cout << "| " << vetor_c[i];
    }

    cout << "\nVetor D: \n";
    for (int i = 0; i < qtde_elementos_por_vetor; i++) {
        cout << "| " << vetor_d[i];
    }

    cout << endl << endl;

    cout << "Produto escalar entre A e B:\n";
    cout << produto_escalar << endl;

    return 0;
}

---

9.

#include <iostream>

using namespace std;

int main() {
    int qtde_elementos_por_vetor;

    cout << "Informe a quantidade de elementos dos vetores: ";
    cin >> qtde_elementos_por_vetor;

    int vetor[qtde_elementos_por_vetor];

    for (int i = 0; i < qtde_elementos_por_vetor; i++) {
        cout << "Informe o elemento " << i << " do vetor: ";
        cin >> vetor[i];
    }

    for (int i = 0; i < qtde_elementos_por_vetor; i++) {
        for (int j = 0; j < (qtde_elementos_por_vetor - i); j++) {
            int elemento_atual = vetor[j];
            int proximo_elemento = vetor[j + 1];

            if (elemento_atual > proximo_elemento) {
                vetor[j + 1] = elemento_atual;
                vetor[j] = proximo_elemento;
            }
        }
    }

    cout << "\nVetor ordenado: \n";
    for (int i = 0; i < qtde_elementos_por_vetor; i++) {
        cout << vetor[i] << endl;
    }

    return 0;
}


---

10.

#include <iostream>

using namespace std;

int main() {
    int matriz[10][10] = {
        {1, 1, 22, 34, 54, -1, 567, 43, 1, 1},
        {2, 32, 1, 23, 2, -23, -23, -1, 0, 1},
        {3456, 1, -3, -3, 1, 78, 9, 1, 2, 0},
        {1, 1, 22, 34, 54, -1, 567, 43, 1, 1},
        {2, 32, 784, 23, 2, -218, -23, -1, 90, 1},
        {1, 1, 22, 34, 54, -1, 567, 43, 1, 1},
        {2, 12, 1, 23, 9999, -213, -23, -123, 0, 1},
        {1, 34, 22, 34, 54, -1, 567, 43, 1, 1},
        {2, 12, 1, 23, 9999, -213, -23, -123, 0, 1},
        {1, 1, 22, 34, 54, -1, 567, 43, 1, 1}
    };
    int maior_valor = matriz[0][0];
    int coordenada_x;
    int coordenada_y;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (matriz[i][j] > maior_valor) {
                maior_valor = matriz[i][j];
                coordenada_x = i;
                coordenada_y = j;
            }
        }
    }

    cout << "Maior valor da matriz: " << maior_valor << endl;
    cout << "Linha desse valor: " << coordenada_x << endl;
    cout << "Coluna desse valor: " << coordenada_y << endl;

    return 0;
}

---

11.

---

12.

#include <iostream>
#include <math.h>

using namespace std;

float calcula_volume_esfera(float raio) {
    float const PI = 3.1415;
    float volume;

    volume = (4 * PI * pow(raio, 3)) / 3;

    return volume;
}

int main() {
    float raio;

    cout << "Raio da esfera: ";
    cin >> raio;

    float volume = calcula_volume_esfera(raio);

    cout << "Volume da esfera: " << volume << endl;

    return 0;
}

---

13.

#include <iostream>

using namespace std;

int gera_inteiro_aleatorio_no_alcance(int minimo, int maximo) {
    int alcance = maximo - minimo + 1;

    return minimo + (rand() % alcance);
}

// Passa a variavel matriz como referência, já que a biblioteca padrão do c++
// não permite que arrays sejam retornados de funções
void popula_matriz_com_valores_aleatorios(int (&matriz)[3][3]) {
    srand(time(NULL));  // Inicializa o seeder de std::rand()

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            matriz[i][j] = gera_inteiro_aleatorio_no_alcance(-50, 50);

            cout << matriz[i][j] << " ";
        }

        cout << endl;
    }
}

int conta_zeros_em_matriz(int matriz[3][3]) {
    int qtde_zeros = 0;

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (matriz[i][j] == 0) {
                qtde_zeros++;
            }
        }
    }

    return qtde_zeros;
}

int main() {
    int matriz[3][3];

    popula_matriz_com_valores_aleatorios(matriz);

    int qtde_zeros = conta_zeros_em_matriz(matriz);

    cout << "Quantidade de zeros na matriz: " << qtde_zeros << endl;

    return 0;
}


---
