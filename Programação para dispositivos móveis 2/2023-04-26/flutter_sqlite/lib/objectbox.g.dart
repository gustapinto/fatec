// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/entities/categoria_entity.dart';
import 'models/entities/nota_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3982092124730203591),
      name: 'Nota',
      lastPropertyId: const IdUid(3, 8744054796978327562),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8888945333080560942),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3856553471901598555),
            name: 'titulo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8744054796978327562),
            name: 'descricao',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'categorias', srcEntity: 'Categoria', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 8020878361179897468),
      name: 'Categoria',
      lastPropertyId: const IdUid(3, 914207135106969750),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4774816842267301198),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1753034434839088620),
            name: 'descricao',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 914207135106969750),
            name: 'notaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 7039801969797262988),
            relationTarget: 'Nota')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 8020878361179897468),
      lastIndexId: const IdUid(1, 7039801969797262988),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Nota: EntityDefinition<Nota>(
        model: _entities[0],
        toOneRelations: (Nota object) => [],
        toManyRelations: (Nota object) => {
              RelInfo<Categoria>.toOneBacklink(
                      3, object.id, (Categoria srcObject) => srcObject.nota):
                  object.categorias
            },
        getId: (Nota object) => object.id,
        setId: (Nota object, int id) {
          object.id = id;
        },
        objectToFB: (Nota object, fb.Builder fbb) {
          final tituloOffset = fbb.writeString(object.titulo);
          final descricaoOffset = fbb.writeString(object.descricao);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, tituloOffset);
          fbb.addOffset(2, descricaoOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Nota(
              titulo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              descricao: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<Nota>(
              object.categorias,
              store,
              RelInfo<Categoria>.toOneBacklink(
                  3, object.id, (Categoria srcObject) => srcObject.nota));
          return object;
        }),
    Categoria: EntityDefinition<Categoria>(
        model: _entities[1],
        toOneRelations: (Categoria object) => [object.nota],
        toManyRelations: (Categoria object) => {},
        getId: (Categoria object) => object.id,
        setId: (Categoria object, int id) {
          object.id = id;
        },
        objectToFB: (Categoria object, fb.Builder fbb) {
          final descricaoOffset = fbb.writeString(object.descricao);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descricaoOffset);
          fbb.addInt64(2, object.nota.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Categoria(
              descricao: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.nota.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.nota.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Nota] entity fields to define ObjectBox queries.
class Nota_ {
  /// see [Nota.id]
  static final id = QueryIntegerProperty<Nota>(_entities[0].properties[0]);

  /// see [Nota.titulo]
  static final titulo = QueryStringProperty<Nota>(_entities[0].properties[1]);

  /// see [Nota.descricao]
  static final descricao =
      QueryStringProperty<Nota>(_entities[0].properties[2]);
}

/// [Categoria] entity fields to define ObjectBox queries.
class Categoria_ {
  /// see [Categoria.id]
  static final id = QueryIntegerProperty<Categoria>(_entities[1].properties[0]);

  /// see [Categoria.descricao]
  static final descricao =
      QueryStringProperty<Categoria>(_entities[1].properties[1]);

  /// see [Categoria.nota]
  static final nota =
      QueryRelationToOne<Categoria, Nota>(_entities[1].properties[2]);
}
